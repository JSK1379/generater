name: flutter_ble_test
description: A Flutter project for BLE environment testing.

publish_to: 'none'

environment:
  sdk: ">=2.12.0 <3.0.0"


dependencies:
  flutter:
    sdk: flutter
  flutter_blue_plus: ^1.3.2


dev_dependencies:
  flutter_test:
    sdk: flutter

flutter:
  uses-material-design: true

  assets:
    - assets/


import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';

void main() {
  runApp(const BleRssiTestApp());
}

class BleRssiTestApp extends StatelessWidget {
  const BleRssiTestApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BLE RSSI 測試',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const BleScannerPage(),
    );
  }
}

class BleScannerPage extends StatefulWidget {
  const BleScannerPage({super.key});

  @override
  State<BleScannerPage> createState() => _BleScannerPageState();
}

class _BleScannerPageState extends State<BleScannerPage> {
  final FlutterBluePlus flutterBlue = FlutterBluePlus.instance;
  List<ScanResult> scanResults = [];
  int rssiThreshold = -75;
  bool isScanning = false;

  void startScan() async {
    setState(() {
      scanResults.clear();
      isScanning = true;
    });
    flutterBlue.startScan(timeout: const Duration(seconds: 5));
    flutterBlue.scanResults.listen((results) {
      setState(() {
        scanResults = results
            .where((r) => r.rssi >= rssiThreshold)
            .toList();
      });
    });
  }

  void stopScan() {
    flutterBlue.stopScan();
    setState(() {
      isScanning = false;
    });
  }

  @override
  void dispose() {
    flutterBlue.stopScan();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('BLE 掃描 + RSSI 測試')),
      body: Column(
        children: [
          Slider(
            min: -100,
            max: -30,
            divisions: 70,
            value: rssiThreshold.toDouble(),
            label: 'RSSI 門檻: $rssiThreshold dBm',
            onChanged: (v) {
              setState(() {
                rssiThreshold = v.toInt();
              });
            },
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: isScanning ? null : startScan,
                child: const Text('開始掃描'),
              ),
              const SizedBox(width: 16),
              ElevatedButton(
                onPressed: isScanning ? stopScan : null,
                child: const Text('停止掃描'),
              ),
            ],
          ),
          const Divider(),
          Expanded(
            child: ListView.builder(
              itemCount: scanResults.length,
              itemBuilder: (context, idx) {
                final r = scanResults[idx];
                return ListTile(
                  title: Text(r.device.name.isNotEmpty
                      ? r.device.name
                      : r.device.id.id),
                  subtitle: Text('RSSI: ${r.rssi} dBm'),
                );
              },
            ),
          ),
        ],
      ),
    );
  }